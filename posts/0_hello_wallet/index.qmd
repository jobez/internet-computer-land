---
title: "hello, wallet"
---

# incredible counting on internet computers

I'll start with a brief little 'how to' guide of building a ui that can 'reach out' to a browser extension wallet and then 'do things with' a contract on starknet. If you think some other technology is way better than starknet, take a deep breath and treat this as me simply using one instance of the general class of ~*internet computers*~.  Then, in a following section, I'll try to probe some of the theory of how that is happening.

There is a little bit of incidental detail that I'll ellide here, as I am using [Quarto](https://quarto.org) which (in turn) lets me use [observable](https://quarto.org/docs/computations/ojs.html) for computation. We can kind of squint and treat it as 'just' javascript and I'll defer all the details on how it isn't to the creators [here](https://observablehq.com/@observablehq/observables-not-javascript).

We will see how well observable plays with contract interop. Here we only break a little ground and in subsequent iterations.

So we start by pulling in `starknetjs` and `get_starknet`
```{ojs}
starknetjs = import("https://jspm.dev/starknet")
get_starknet = import("https://jspm.dev/get-starknet")
```

Then we write a async function that uses `get_starknet` to display to a user an interface for selecting and consenting a wallet and a given account to a session.

```{ojs}
async function connectWallet(e)  {
   var wallet =  await get_starknet.connect();
   await wallet.enable();
   return wallet;
}
```

And consider this some boiler plate for observable to give me a little button view that, on clicked, will present aforementioned wallet interface.

```{ojs}
//| echo: false
wallet ? md`${wallet.selectedAddress}, you achieved things. You pushed through. You did it.` : md`Come on. All you need to do is install a browser plugin. You can do it.`
```


```{ojs}
viewof wallet = Inputs.button("Connect", {value: null, reduce: connectWallet})
```

If you had the audacity to push through the resistance and actually install a browser plugin wallet, you can see that its object unifies a 
couple of abstractions we will get into in the question of how a client and contract on a chain interact: `account` and `provider`


```{ojs}
wallet
```

With a wallet, we can construct an interface to a contract that 'lives' on a chain. We also need said contracts `abi` which is the contract's application binary interface and the contracts address.

The abi is constructed when you compile a cairo contract and the address is generated from the deployment of a contract to a chain.


```{ojs}
contract = {
var abi = await FileAttachment("../counter_abi.json").json()
return wallet ? (new starknetjs.Contract(abi, "0x036486801b8f42e950824cba55b2df8cccb0af2497992f807a7e1d9abd2c6ba1", wallet.account)) : null

}
```

Here we call a view method, basically reading state from the contract. Observable has some magic that lets me treat promises like regular statements, but everything 'across' the contract interaction is asynchronous.

```{ojs}
count = contract.counter()
```

```{ojs}
contract ? md`${count} is the count` : null
```

Increment counter mutates the contract state. 

```{ojs}
//| echo: false
async function callIncrement(e)  {
   var txn = await contract.incrementCounter(1);
   return txn;
}
```
Invoking it gives us an object with a transaction hash.

```{ojs}
viewof incrementTxn = Inputs.button("increment", {value: null, reduce: callIncrement})
```
What's going on? What's happening? What is this magic?

```{ojs}
incrementTxn
```

```{ojs}
async function* pollTxn(tx, timeout) {
 while(true) {
  var last_response; 
  let receipt = await wallet.provider.getTransactionReceipt(tx.transaction_hash)
  console.log(receipt);
  if (receipt.status == 'REJECTED' || receipt.status == 'ACCEPTED_ON_L2') {
    return receipt;
  } else {
    last_response = receipt;
    await Promises.delay(timeout);
    if (last_response.status != receipt.status) {
    yield receipt;
    }
   ;
  }
  }  
}
```

```{ojs}
txnTracker = pollTxn(incrementTxn, 10000);
```

```{ojs}
txnTracker
```

```{ojs}
contract
```
 
# communication between users, applications, blockchains

A wallet gives a user an account on a given blockchain. But implicitly it offers a way for users to communicate with it.

How?

Let's investigate our `wallet` object again.

```{ojs}
wallet
```

What are these attributes of `account` and `provider`?

A provider lets you interact with the network without signing transactions, which basically means it gives you read access.

When we want write access, we communicate with our account to, in Starknet's case, the sequencer node.

But how is this communication done?

We can be so bold as to look at [starknetjs source](https://github.com/0xs34n/starknet.js/blob/develop/src/provider/rpc.ts) and see that the provider object using an rpc protocol against the provider endpoint. 

Same deal with the [sequencer](https://github.com/0xs34n/starknet.js/blob/develop/src/provider/sequencer.ts), but it also seems that some functionality is exposed as http endpoints, i.e. [callContract](https://github.com/0xs34n/starknet.js/blob/develop/src/provider/sequencer.ts#L235)

So let's try to follow what is happening when a user interacts with a contract on a web client.

Essentially, starknet-js takes ownership of coordinating users to the right remote calls. In a mature blockchain ecologies, the remote calls are to an open class of processes, where processes can perform certain roles like having access to the full history of blockchain transactions or simply accepting/relaying transactions and participating in consensus.

So when I click the increment button and get back a transaction hash, the user's action/agency is given an identifiable ticket in a queue of transactions that need to make it to a block for it to be finalized.

A couple things stand out--one, is that 'reads' from a contract need to have some awareness of the state of users transactions of the contract at the very least, let alone the possible transactions of other users. This is something I'll explore in subsequent posts.

I am still unsure how well observablehq's reactive constructs will play with 'hooking' into a blockchain contracts. The allure of starting out with it is offers me more joy than the full gamut react or whatever hell else is popular in js land. 

We will see if there's a hard limit. 

Another is, having had a little experience with the early nft wave of Solana, when you are so lucky to have a 'surge' of users trying to submit transactions against the same node/rpc, you aren't going to have a good time. There were a lot of cases of quiet failure.

So the question of the best of all ways to provide your users the smoothest experience with a blockchain might involve a little devops.

Onward.
