---
title: "bitwise tictactoe"
---

```{ojs}
//| echo: false
contract = {
var abi = await FileAttachment("tictactoe_abi.json").json()
return wallet ? (new starknetjs.Contract(abi, "0x02a21ef6a5f000e6647857c88b46a66c54df282d88ca6be7d86079672e5f51b4",
wallet.account)) : null

}
```



```{ojs}
//| panel: sidebar
//| echo: false

import { connectWallet, starknetjs  } from "/posts/0_hello_wallet/index.qmd";
d3 = require("d3@6");

viewof wallet = Inputs.button("Connect", {value: null, reduce: connectWallet})

viewof game_id = Inputs.range([1, 255], {step: 1, label: "Game Id"})

async function createGame(v) {
    var txn = await contract.init_new_game()
    console.log(txn);
    return txn;

}

async function joinGame(v) {
    console.log(game_id);
    var txn = await contract.join_game(game_id)
    console.log(txn);
    return txn;

}

viewof txn_state = Inputs.button([
  ["Create", createGame],
  ["Join", joinGame]
//  ["Submit move", value => console.log("submit")]  

], {value: null, label: "Game"})

```


::: {.panel-tabset}
## game

```{ojs}
//| echo: false
__card = renderGame()
```

## debugging


```{ojs}
wallet.selectedAddress

```

```{ojs}
mutable operativeContractState = undefined;
operativeContractState;
```

```{ojs}
txn_state

```

```{ojs}
 txn_status = null // pollTxn(txn_state, 1000)
```



```{ojs}

async function fetchContractState () {

    if (contract) {
    let c_game_state = await getGameState();
    let playerRole = getRole(c_game_state);    
    let shouldMove = ourTurn(playerRole, c_game_state[1]);
    c_game_state[1].state_x = c_game_state[1].state_x.toNumber();
    c_game_state[1].state_o = c_game_state[1].state_o.toNumber();    
    c_game_state.push(playerRole)
    c_game_state.push(shouldMove)
    mutable operativeContractState = c_game_state
    return c_game_state;

    } else {
    
      return [starknetjs.number.toBN(0), {}, -1];  
    
    }

}

```

```{ojs}
function ourTurn(role, contractState) {
    var last_mover = contractState.last_mover.toNumber();

    if (role == 1) {
        if (last_mover == 0  || last_mover == 2) {
        return true;
       }
    
    } else {
    
    if ( last_mover == 1) {
        return true;
    }
    
    }
    

    return false;




}

```


```{ojs}
async function getGameState() {
       let game_id = await contract.player_to_game_id(wallet.selectedAddress); 
       let game_state = await contract.game_id_to_game(game_id.game_idx)
       return [game_id.game_idx, game_state.game]
    }
```





```{ojs}
function getRole (c_game_state) {

    let hex_address_o = starknetjs.number.toHex(c_game_state[1].player_o).toString().slice(2);
    let hex_address_x = starknetjs.number.toHex(c_game_state[1].player_x).toString().slice(2);
    let formatted_addr = wallet.selectedAddress.slice(3);
    if (hex_address_o == formatted_addr) {
        return 2;
        
    } 
    
    if (hex_address_x == formatted_addr) {
        return 1;
    }
    
    return 0;

}
```

```{ojs}
contract
```

```{ojs}
wallet
```
:::


## tic tac toe

NOTE: the above UI is coded against a locally deployed contract. I'll remove this note when I deployed to a publicly available testnet.

There is a cool solidity tutorial that goes through implementing [tictactoe](https://book.tictactoken.co/) which inspired me to try to do a tictactoe web client and cairo/starknet contract.

There was [an excellent observablehq notebook](https://observablehq.com/@alaricmoore/tic-tac-toe)  that I am only slightly editing here. It really demonstrates observablehq's really elegant async abstractions, [generators](https://observablehq.com/@observablehq/introduction-to-generators).

I'll be referencing my cairo code as of [this commit](https://github.com/jobez/bw-tictactoe/commit/3a769b644f9a31b2801e142754feec6742fb437e).

## whats in a game?

How do we represent a game of tictactoe?

```
struct Game {
    player_x: felt,
    player_o: felt,
    state_x: felt,
    state_o: felt,
    last_mover: felt,
    winner: felt,
}

```
Each role (X and O), to be assigned to a player, needs a player to interact with the contract via an account so we can assign an address for a role.

Methods 'exposed' for account interaction are tagged with `external` in cairo and you can use `get_caller_address` to get the address intrinsic to the interaction. We have two external methods exposed for users to create and join games.

```
@external
func init_new_game{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}() {
   let address : felt = get_caller_address();     
   let game_idx : felt = game_count.read();

   assert_not_zero(address);     
    
   let potential_game_idx : felt = player_to_game_idx.read(address);
 
   with_attr error_message ("a player can only have one active game") {
        assert potential_game_idx = 0;
   }

 %{ print(f"passing value: {ids.address=} {ids.game_idx=} ") %}
   let new_game : Game = Game(address, 0, 0, 0, 0, 0);
    
   game_state.write(game_idx+1, new_game);
   player_to_game_idx.write(address, game_idx+1); 
   game_count.write(game_idx+2); 

   return (); 
}
```

We need to keep track of `game_count` so we can establish identifiers for games upon initialization in `init_game` and that identifier is used as an argument in `join_game`.

```
@external
func join_game{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(game_idx: felt){
   let address : felt = get_caller_address();
   let game : Game = game_state.read(game_idx);
   with_attr error_message ("a game must exist to join") {
       assert_not_zero(game.player_x);
   }

    with_attr error_message ("you cannot join the same game") {
       assert_not_equal(game.player_x, address);
   }

   with_attr error_message ("a spot must be available to join") {
       assert game.player_o = 0;
   }

   let joined_game : Game = Game(game.player_x, address, game.state_x, game.state_o, game.last_mover, game.winner);
   game_state.write(game_idx, joined_game); 
  player_to_game_idx.write(address, game_idx);

   return (); 
}
```


Each role has its own state. The state is encoded into an integer, where the value represents the X or O move on a tictactoe board. Each 'spot' on the board (counted from 0 to 8) is treated as power of two. 

We check for state of each player for a win state by encoding the winning configurations in their representation and 'bitwise_and` the state against a winning state. If the result of that bitwise_and is the winning state, the player has won the game.

```
func _check_winner{bitwise_ptr: BitwiseBuiltin*}(state: felt, idx: felt, winners: felt*) -> felt {
    let win_state : felt = [winners];
    
    let win_check : felt = bitwise_and(state, win_state);

    %{ print(f"passing value: {ids.state=} {ids.win_state=} {ids.win_check=}") %}
    if (win_check == win_state) {
       return 1; 
    }

    if (idx == 0) {
       return (0); 
    } else {
       let result : felt =  _check_winner(state=state, idx=idx-1, winners=winners+1);
       return (result); 
    }
   
}

func check_winner{bitwise_ptr: BitwiseBuiltin*}(state: felt) -> felt {
    alloc_locals;
    let winners: felt* = alloc();

    assert winners[0] = 448; 
    // 111 000 000
    assert winners[1] = 56;
    // 000 111 000
    assert winners[2] = 7;
    // 000 000 111
    assert winners[3] = 292;
    // 100 100 100
    assert winners[4] = 146;
    // 010 010 010
    assert winners[5] = 73;
    // 001 001 001
    assert winners[6] = 273;
    // 100 010 001
    assert winners[7] = 84;
    // 001010100

    let res : felt = _check_winner(state=state, idx=7, winners=winners);
    return (res);

}
```

This `check_winner` logic is part of the overall logic in `make_move`. We have to safeguard updates of game state for a couple different domains of coherence.

```
@external
func make_move{syscall_ptr : felt*, bitwise_ptr: BitwiseBuiltin*, pedersen_ptr : HashBuiltin*, range_check_ptr}(game_idx: felt, updated_game_state : felt) {
   alloc_locals;
   let address : felt = get_caller_address();     
   assert_not_zero(address);     
   let game : Game = game_state.read(game_idx); 
   let role : felt = derive_address_role(game, address);
   
    
    enforce_permissable_move(role, game);

    let (new_game : Game, game_over : felt) = update_game(role, game, updated_game_state);

    game_state.write(game_idx, new_game);   
    
    handle_end_game(game_over, address, role, game_idx, new_game);
    

    return ();

}
```

The first is whether a given agent belongs to the game at all, that is whether they have a role.

We need to derive the role of player in the game from address via `derive_address_role` This function also gives us an error if the actor interacting with the contract doesn't belong to the denoted game at all:

```
func derive_address_role(game : Game, address : felt) -> felt {
    if (address == game.player_x) {
        return (PLAYER_X);
    
    }

    if (address == game.player_o) {
        return (PLAYER_O);
        
    }

   with_attr error_message ("this player is not registered in this game") {
        assert 1 = 0;
   }    
   
   return (0); 

}
```

The second domain is the logic of the game itself. Is it the players turn? Is the attempted move coherent with the previous move?

First: in the case the address has a role in the game, we check to see if it is the players turn.

```
func enforce_permissable_move(role: felt, game: Game) {

   with_attr error_message ("not your turn") {
      assert_not_equal(role, game.last_mover);
   }

   with_attr error_message ("game over") {
      assert game.winner = 0;
   }    

    return ();
}
```

All that safe-guarding of a user and their role within a game, we move into the logic of whether a user with a role in a game has made a valid move and, furthermore, winning move.

```
func update_game{bitwise_ptr: BitwiseBuiltin*, range_check_ptr}(role : felt, prior_game : Game, new_move :felt) -> (new_game: Game, end_game: felt) {
    alloc_locals;
    validate_moves(role, prior_game.state_o, prior_game.state_x, new_move);
    if (role == PLAYER_X) {
       let winning_move = check_winner(new_move); 
       let maybe_won = winning_move * role; 
       let new_game = Game(prior_game.player_x, prior_game.player_o, new_move, prior_game.state_o, PLAYER_X, maybe_won);
       return (new_game=new_game, end_game=winning_move);
    } else {
       let winning_move = check_winner(new_move); 
       let maybe_won = winning_move * role;
       let new_game = Game(prior_game.player_x, prior_game.player_o, prior_game.state_x, new_move, PLAYER_O, maybe_won);
       return (new_game=new_game, end_game=winning_move);
    }

}
```
The `validate_moves` logic derives the difference between the prior board state and the new board state. It needs to discern which role the given agent has. 

```
func validate_moves{bitwise_ptr: BitwiseBuiltin*, range_check_ptr}(role: felt, o_board_state : felt, x_board_state : felt, possible_state : felt) {
 
    alloc_locals;
    
   if (role == PLAYER_X) {
        let possible_move : felt = possible_state - x_board_state;
        validate_move(possible_move, o_board_state);
        tempvar bitwise_ptr=bitwise_ptr;
        tempvar range_check_ptr=range_check_ptr;
        

    
    } else {
       let possible_move : felt = possible_state - o_board_state;
       validate_move(possible_move, x_board_state);
       tempvar bitwise_ptr=bitwise_ptr;
       tempvar range_check_ptr=range_check_ptr;
    }

    tempvar bitwise_ptr=bitwise_ptr;
    tempvar range_check_ptr=range_check_ptr;


    // is the one move forward attempting to be made already 'occupied'?
    // if the move is a valid power of two, take the power and see if it exists in other_role_board_state
    // if not, we gucci

    return ();

}
```

Once that has been established, it calls into `validate_move.` 

We want to maintain that: 

- the agent submitted a board state that succeeds the prior (that new_state - old_state) is greater than zero (both not-negative and not-zero
- that the possible move is a power of two (because we represent each valid position (0-7) as a power of two
- if it is a power of two, we want to make sure the move is within the valid range
- and if it is a valid range, we want to make sure that the spot isn't already played by either user 

If all that passes, we move on to `handle_end_game`

```
func validate_move{bitwise_ptr: BitwiseBuiltin*, range_check_ptr}(possible_move : felt, opposing_board_state : felt, prior_board_state: felt) {
        alloc_locals;
        let possible_move_is_not_negative = is_nn(possible_move);

        with_attr error_message ("board state must succeed prior state") {
            assert possible_move_is_not_negative = 1;
        }

        with_attr error_message ("board state must change") {
           assert_not_zero(possible_move); 
        }

        let valid_possible_move : felt = is_pow_of_two(possible_move);
    
        with_attr error_message ("not a valid discrete move from prior board state") {
            // is the delta only one move forward?
            // for role, is possible_state - role_board_state a power of two?, is so, which power?

            assert valid_possible_move = 1;
        }    

        // for role, is possible_state - role_board_state a power of two?, is so, which power?
        let (local move_on_board) = log2(possible_move, 8, -1);

        with_attr error_message ("move is not on the board") {
            // is the delta only one move forward?
            // for role, is possible_state - role_board_state a power of two?, is so, which power?

           assert_not_equal(move_on_board, -1);
        }

        // did the other player already make a move in that spot?
        let move_is_taken : felt = get_nth_bit(opposing_board_state, move_on_board);
       %{ print(f"move check: {ids.possible_move=} {ids.move_on_board=} {ids.opposing_board_state=} {ids.move_is_taken=} ") %}

        with_attr error_message ("move is already taken by opposition") {
            // is the delta only one move forward?
            // for role, is possible_state - role_board_state a power of two?, is so, which power?

           assert_not_equal(move_is_taken, 1);
        }

        // did the current player already make a move in that spot?
        let prior_move_is_taken : felt = get_nth_bit(prior_board_state, move_on_board);

        with_attr error_message ("move is already made by yourself") {
            // is the delta only one move forward?
            // for role, is possible_state - role_board_state a power of two?, is so, which power?

           assert_not_equal(prior_move_is_taken, 1);
        }

    return ();
}

```


The `handle_end_game` function releases a player from being associatted with completed games, as well as emiting a game over event. The `tempvar` stuff is incidental complexity in the cairo vm involving how it tracks references (perhaps to be expanded in another post).

```
func handle_end_game{ syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(game_ended : felt, maybe_winner : felt, maybe_winner_role : felt, game_id : felt, game : Game) {
    if (game_ended == 0) {
    tempvar syscall_ptr=syscall_ptr;
    tempvar pedersen_ptr=pedersen_ptr;
    tempvar range_check_ptr=range_check_ptr;
    
    } else {
    player_to_game_idx.write(game.player_x, 0);
    player_to_game_idx.write(game.player_o, 0);
    game_over.emit(game_id=game_id, role=maybe_winner_role, winner=maybe_winner);
    tempvar syscall_ptr=syscall_ptr;
    tempvar pedersen_ptr=pedersen_ptr;
    tempvar range_check_ptr=range_check_ptr;    
    
    } 

    
    return ();
}
```

The game_over event gives a client a way to know that a given move ends the game. This happens when a user submits a transaction and we query for a receipt of the transaction. Events are communicated in the receipt of transactions and obtusely look something like this:

```
{"execution_resources": {"n_memory_holes": 46, "n_steps": 1036, "builtin_instance_counter": {"pedersen_builtin": 4, "range_check_builtin": 15, "bitwise_builtin": 6, "ecdsa_builtin": 1}}, "actual_fee": "0x4052f28072000", "block_hash": "0x11", "block_number": 17, "events": [{"keys": ["0xdabba9ce03ade36611d5d401193a84cd9e1d9ee37a87ce9bbab55690fcfae0"], "from_address": "0x2a21ef6a5f000e6647857c88b46a66c54df282d88ca6be7d86079672e5f51b4", "data": ["0x1", "0x1", "0x38aa61d589ed7010703ec364fa37a474b7c66b4079579ff472d65731919dfdf"]}, {"keys": ["0x99cd8bde557814842a3121e8ddfd433a539b8c9f14bf31ebf108d12e6196e9"], "from_address": "0x62230ea046a9a5fbc261ac77d03c8d41e5d442db2284587570ab46455fd2488", "data": ["0x38aa61d589ed7010703ec364fa37a474b7c66b4079579ff472d65731919dfdf", "0x388ca486b82e20cc81965d056b4cdcaacdffe0cf08e20ed8ba10ea97a487004", "0x4052f28072000", "0x0"]}], "status": "ACCEPTED_ON_L2", "transaction_index": 0, "transaction_hash": "0x2e1d29606ae45b8ed95b598a20e337bea7a9ac92fae6dde10527daab4a1ee14", "l2_to_l1_messages": []}
```
The 'keys' of events can be derived like so:

```{ojs}
//| echo: true
// "0xdabba9ce03ade36611d5d401193a84cd9e1d9ee37a87ce9bbab55690fcfae0"
selector_name = starknetjs.hash.getSelectorFromName("game_over");
selector_name;
```
### viewing a conttract

The view logic here might be a little too complex. Essentially it is one render loop that uses `observablehq` primitives. We get the state of a given game, the client state of the view, and pass it to render logic. If we have a pendingTxn in state, we get the receipt, then rerender, or we just wait 3 seconds and rerender.


```{ojs}
async function* renderGame() {
  const viewState = createState();
  var contractState = [starknetjs.number.toBN(0), {}, -1];  
  while (true) {
    let body = null;
    
    const p = new Promise(async (resolve) => {
      console.log("about to render", contractState, viewState);
      body = renderGrid(contractState, viewState, resolve);
      contractState = await fetchContractState();
      if (contract) {
      
      if(viewState.pendingTxn) {
      
         await handleTxn(viewState)  
         resolve() 
      
      } else {
      
      await Promises.delay(3000);
      resolve();
      
      }
      }
    });

    yield body;

    await p;
  }
}
```

```{ojs}
async function handleTxn(state) {
    let txnHash = state.pendingTxn.transaction_hash;
    let receipt =  await wallet.provider.getTransactionReceipt(txnHash);
    if (receipt.status == 'REJECTED' || receipt.status == 'ACCEPTED_ON_L2') {

        state.pendingTxn = null;
        // state.txnState = null;
    
    } else {
    
        state.txnState = receipt;
        console.log(receipt);
    
    }
    


}


```


```{ojs}
function renderBox(contractState, cr, cellValue, onClick) {
     let boardState = contractState[1];
     let xState = boardState.state_x;
     let oState = boardState.state_o;
     let binaryRep = cr_to_binary(cr[0], cr[1]);
     let maybeX = xState & binaryRep;
     let maybeO = oState & binaryRep;

    if (maybeX == binaryRep) {
        cellValue = 1;
    }
    if (maybeO == binaryRep) {
        cellValue = 2;
    }
 

 
  
  const box = html`
    <div
      style="
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100px;
        height: 100px;
        border: 2px black solid;
        user-select: none;
      ">
     <div style="font-size: 5em">${charLut[cellValue]}</div>
  </div>`;

  box.addEventListener("click", onClick);

  //render box cares not about what the clicking does
  return box;
}
```

```{ojs}
function boardStateForRole(role, contractState) {
    let boardState = undefined;
    if (role == 1) {
    
        boardState = contractState.state_x
        
    } else if (role == 2) {
    
        boardState = contractState.state_o
    
    }
    
    return boardState;
}
```

```{ojs}
txnView = (contractState, viewState) => {
    if (viewState.pendingTxn) {
    
    return html`<div>Txn: ${viewState.pendingTxn.transaction_hash} Current status: ${viewState.txnState ? viewState.txnState.status : "pending"}</div>`
    
    } else {
    
      return "";  
    }
}

```

```{ojs}

turnView = (contractState, viewState) => {
    let ourTurn = contractState[3];
    return html`<div>${ourTurn ? "Your turn." : "Their turn"}</div>`

}

```

```{ojs}

renderGrid = (contractState, state, onChange) => {
  let button = html`<button>Submit move</button>`

  let submitMove = async (e) => {
     let gameId = contractState[0].toNumber();
     let role = contractState[2];
     let moveToSubmit = state.my_potential_move[0];
     let boardState = boardStateForRole(role, contractState[1]); 
     let playerTotalBoardState = moveToSubmit + boardState;
     let txn = await contract.make_move(gameId, playerTotalBoardState);
     state.pendingTxn = txn
     onChange();
  }
  button.addEventListener("click", submitMove)
  
  let txnViewer = txnView(contractState, state);
  return html`
  <div style="display:flex; flex-direction: column; justify-content: center; align-items: center;">
    <h1 style="font-size: 5em;color: red">Tic-Tac-Toe</h1>
    <h2> Winner is ${charLut[state.winner]}</h2> 
    <h4>Current Game Id : ${contractState[0].toNumber()}</h2>
    ${button}
    ${txnViewer}
    ${turnView(contractState, state)}
    <div style="
      display:inline-flex;
      justify-content: center;
      align-items: center;
      border: 2px solid black;
    ">${d3.range(GRID_WIDTH).map((row) => {
      return html`<div>${d3.range(GRID_HEIGHT).map((col) =>
        renderBox(contractState, [col, row], state.board[col][row], () => {
          handleTurn(contractState, state, col, row); 
          onChange();
          //}
        })
      )}`;
    })}
    </div>
  </div>`
  }

```

```{ojs}
function cr_to_binary(col, row) {
    var increase;
    switch (col) {
        case 0: 
            increase = 0;
            break;
        case 1:
            increase = 3;
            break;
        case 2:
            increase = 6
;

    }
    
    var binary_idx = row + increase;
    return Math.pow(2, binary_idx);
}
```

```{ojs}
function handleTurn(contractState, state, col, row) {
  let role = contractState[2];

  if (state.board[col][row] === 0) {
      state.board[col][row] = role;
      state.my_potential_move = [ cr_to_binary(col, row)  , [col, row] ]


    state.turn++;
    // winGame(state);
    console.log(state, col, row);
  } else {
    let bival = state.my_potential_move[0];
    let [p_c, p_r] = state.my_potential_move[1]
    if (p_c == col && p_r == row) {
    state.my_potential_move = null;
    state.board[col][row] = 0;
     
     }

  }
}

```

```{ojs}
charLut = ["", "X", "O", "neither"]
```

```{ojs}
createState = () => {
  const board = d3
    .range(GRID_HEIGHT)
    .map(() => d3.range(GRID_WIDTH).map(() => 0));
  //state[2][2] = 1;
  return { board, turn: 0, winner: 0, x_player_state: 0, o_player_state: 0, my_potential_move: null, pendingTxn: null, txnState: null };
}
```

```{ojs}
//| echo: false
GRID_WIDTH = 3
GRID_HEIGHT = 3
X_PLAYER = 1
X_PLAYER_STATE = 0
O_PLAYER = 2
O_PLAYER_STATE = 0
NEITHER = 3
```
