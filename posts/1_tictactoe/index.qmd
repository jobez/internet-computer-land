---
title: "bitwise tictactoe"
---

```{ojs}
//| echo: false
contract = {
var abi = await FileAttachment("tictactoe_abi.json").json()
return wallet ? (new starknetjs.Contract(abi, "0x02a21ef6a5f000e6647857c88b46a66c54df282d88ca6be7d86079672e5f51b4",
wallet.account)) : null

}
```



```{ojs}
//| panel: sidebar
//| echo: false

import { connectWallet, starknetjs  } from "/posts/0_hello_wallet/index.qmd";
d3 = require("d3@6");

viewof wallet = Inputs.button("Connect", {value: null, reduce: connectWallet})

viewof game_id = Inputs.range([1, 255], {step: 1, label: "Game Id"})

async function createGame(v) {
    var txn = await contract.init_new_game()
    console.log(txn);
    return txn;

}

async function joinGame(v) {
    console.log(game_id);
    var txn = await contract.join_game(game_id)
    console.log(txn);
    return txn;

}

viewof txn_state = Inputs.button([
  ["Create", createGame],
  ["Join", joinGame]
//  ["Submit move", value => console.log("submit")]  

], {value: null, label: "Game"})

```


::: {.panel-tabset}
## game

```{ojs}
//| echo: false
__card = renderGame()
```

## debugging

```{ojs}
//| echo: true
// "0xdabba9ce03ade36611d5d401193a84cd9e1d9ee37a87ce9bbab55690fcfae0"
selector_name = starknetjs.hash.getSelectorFromName("game_over");
selector_name;
```

```{ojs}
wallet.selectedAddress

```

```{ojs}
mutable operativeContractState = undefined;
operativeContractState;
```

```{ojs}
txn_state

```

```{ojs}
 txn_status = null // pollTxn(txn_state, 1000)
```



```{ojs}

async function fetchContractState () {

    if (contract) {
    let c_game_state = await getGameState();
    let playerRole = getRole(c_game_state);    
    let shouldMove = ourTurn(playerRole, c_game_state[1]);
    c_game_state[1].state_x = c_game_state[1].state_x.toNumber();
    c_game_state[1].state_o = c_game_state[1].state_o.toNumber();    
    c_game_state.push(playerRole)
    c_game_state.push(shouldMove)
    mutable operativeContractState = c_game_state
    return c_game_state;

    } else {
    
      return [starknetjs.number.toBN(0), {}, -1];  
    
    }

}

```

```{ojs}
function ourTurn(role, contractState) {
    var last_mover = contractState.last_mover.toNumber();

    if (role == 1) {
        if (last_mover == 0  || last_mover == 2) {
        return true;
       }
    
    } else {
    
    if ( last_mover == 1) {
        return true;
    }
    
    }
    

    return false;




}

```


```{ojs}
async function getGameState() {
       let game_id = await contract.player_to_game_id(wallet.selectedAddress); 
       let game_state = await contract.game_id_to_game(game_id.game_idx)
       return [game_id.game_idx, game_state.game]
    }
```





```{ojs}
function getRole (c_game_state) {

    let hex_address_o = starknetjs.number.toHex(c_game_state[1].player_o).toString().slice(2);
    let hex_address_x = starknetjs.number.toHex(c_game_state[1].player_x).toString().slice(2);
    let formatted_addr = wallet.selectedAddress.slice(3);
    if (hex_address_o == formatted_addr) {
        return 2;
        
    } 
    
    if (hex_address_x == formatted_addr) {
        return 1;
    }
    
    return 0;

}
```

```{ojs}
contract
```

```{ojs}
wallet
```
:::


## tic tac toe

There is a cool solidity tutorial that goes through implementing [tictactoe](https://book.tictactoken.co/) which inspired me to try to do a tictactoe web client and cairo/starknet contract.

There was [an excellent observablehq notebook](https://observablehq.com/@alaricmoore/tic-tac-toe)  that I am only slightly editing here. It really demonstrates observablehq's really elegant async abstractions, [generators](https://observablehq.com/@observablehq/introduction-to-generators).

I won't go to into them here, but I am hopeful/curious about whether these abstractions can give good flexibility in working with the inherently asynchronous nature of blockchain interaction.

## whats in a game?

How do we represent a game of tictactoe?

```
struct Game {
    player_x: felt,
    player_o: felt,
    state_x: felt,
    state_o: felt,
    completed: felt,
}
```

```{ojs}
async function handleTxn(state) {
    let txnHash = state.pendingTxn.transaction_hash;
    let receipt =  await wallet.provider.getTransactionReceipt(txnHash);
    if (receipt.status == 'REJECTED' || receipt.status == 'ACCEPTED_ON_L2') {

        state.pendingTxn = null;
        // state.txnState = null;
    
    } else {
    
        state.txnState = receipt;
        console.log(receipt);
    
    }
    


}


```


```{ojs}
async function* pollTxn(tx, timeout) {
 while(true) {
  var last_response = ''; 
  let receipt = await wallet.provider.getTransactionReceipt(tx.transaction_hash)
  if (receipt.status == 'REJECTED' || receipt.status == 'ACCEPTED_ON_L2') {
    return receipt;
  } else {
    await Promises.delay(timeout);
    if (last_response != receipt.status) {
    yield receipt;
    }
    last_response = receipt.status;
   
  }
  }
}
```


### coordinating game session

A game needs two players. Since the game is going to be played 'across' a contract, we need to allow one player to create and invite another player to a game.


```{ojs}
async function* renderGame() {
  const viewState = createState();
  var contractState = [starknetjs.number.toBN(0), {}, -1];  
  while (true) {
    let body = null;
    
    const p = new Promise(async (resolve) => {
      console.log("about to render", contractState, viewState);
      body = renderGrid(contractState, viewState, resolve);
      contractState = await fetchContractState();
      if (contract) {
      
      if(viewState.pendingTxn) {
      
         await handleTxn(viewState)  
         resolve() 
      
      } else {
      
      await Promises.delay(8000);
      resolve();
      
      }
      }
    });

    yield body;

    await p;
  }
}
```

```{ojs}
function renderBox(contractState, cr, cellValue, onClick) {
     let boardState = contractState[1];
     let xState = boardState.state_x;
     let oState = boardState.state_o;
     let binaryRep = cr_to_binary(cr[0], cr[1]);
     let maybeX = xState & binaryRep;
     let maybeO = oState & binaryRep;

    if (maybeX == binaryRep) {
        cellValue = 1;
    }
    if (maybeO == binaryRep) {
        cellValue = 2;
    }
 

 
  
  const box = html`
    <div
      style="
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100px;
        height: 100px;
        border: 2px black solid;
        user-select: none;
      ">
     <div style="font-size: 5em">${charLut[cellValue]}</div>
  </div>`;

  box.addEventListener("click", onClick);

  //render box cares not about what the clicking does
  return box;
}
```

```{ojs}
function boardStateForRole(role, contractState) {
    let boardState = undefined;
    if (role == 1) {
    
        boardState = contractState.state_x
        
    } else if (role == 2) {
    
        boardState = contractState.state_o
    
    }
    
    return boardState;
}
```

```{ojs}
txnView = (contractState, viewState) => {
    if (viewState.pendingTxn) {
    
    return html`<div>Txn: ${viewState.pendingTxn.transaction_hash} Current status: ${viewState.txnState ? viewState.txnState.status : "pending"}</div>`
    
    } else {
    
      return "";  
    }
}

```

```{ojs}

turnView = (contractState, viewState) => {
    let ourTurn = contractState[3];
    return html`<div>${ourTurn ? "Your turn." : "Their turn"}</div>`

}

```

```{ojs}

renderGrid = (contractState, state, onChange) => {
  let button = html`<button>Submit move</button>`

  let submitMove = async (e) => {
     let gameId = contractState[0].toNumber();
     let role = contractState[2];
     let moveToSubmit = state.my_potential_move[0];
     let boardState = boardStateForRole(role, contractState[1]); 
     let playerTotalBoardState = moveToSubmit + boardState;
     let txn = await contract.make_move(gameId, playerTotalBoardState);
     state.pendingTxn = txn
     onChange();
  }
  button.addEventListener("click", submitMove)
  
  let txnViewer = txnView(contractState, state);
  return html`
  <div style="display:flex; flex-direction: column; justify-content: center; align-items: center;">
    <h1 style="font-size: 5em;color: red">Tic-Tac-Toe</h1>
    <h2> Winner is ${charLut[state.winner]}</h2> 
    <h4>Current Game Id : ${contractState[0].toNumber()}</h2>
    ${button}
    ${txnViewer}
    ${turnView(contractState, state)}
    <div style="
      display:inline-flex;
      justify-content: center;
      align-items: center;
      border: 2px solid black;
    ">${d3.range(GRID_WIDTH).map((row) => {
      return html`<div>${d3.range(GRID_HEIGHT).map((col) =>
        renderBox(contractState, [col, row], state.board[col][row], () => {
          handleTurn(contractState, state, col, row); 
          onChange();
          //}
        })
      )}`;
    })}
    </div>
  </div>`
  }

```

```{ojs}
function cr_to_binary(col, row) {
    var increase;
    switch (col) {
        case 0: 
            increase = 0;
            break;
        case 1:
            increase = 3;
            break;
        case 2:
            increase = 6
;

    }
    
    var binary_idx = row + increase;
    return Math.pow(2, binary_idx);
}
```

```{ojs}
function handleTurn(contractState, state, col, row) {
  let role = contractState[2];

  if (state.board[col][row] === 0) {
      state.board[col][row] = role;
      state.my_potential_move = [ cr_to_binary(col, row)  , [col, row] ]


    state.turn++;
    // winGame(state);
    console.log(state, col, row);
  } else {
    let bival = state.my_potential_move[0];
    let [p_c, p_r] = state.my_potential_move[1]
    if (p_c == col && p_r == row) {
    state.my_potential_move = null;
    state.board[col][row] = 0;
     
     }

  }
}

```

```{ojs}
charLut = ["", "X", "O", "neither"]
```

```{ojs}
createState = () => {
  const board = d3
    .range(GRID_HEIGHT)
    .map(() => d3.range(GRID_WIDTH).map(() => 0));
  //state[2][2] = 1;
  return { board, turn: 0, winner: 0, x_player_state: 0, o_player_state: 0, my_potential_move: null, pendingTxn: null, txnState: null };
}
```

```{ojs}
//| echo: false
GRID_WIDTH = 3
GRID_HEIGHT = 3
X_PLAYER = 1
X_PLAYER_STATE = 0
O_PLAYER = 2
O_PLAYER_STATE = 0
NEITHER = 3
```
